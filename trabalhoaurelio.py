# -*- coding: utf-8 -*-
"""trabalhoAurelio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/138JZyqzAoser1XUDsWac04emb7cVVyoC
"""

!pip install ultralytics

import cv2
import numpy as np
from ultralytics import YOLO
from matplotlib import pyplot as plt
from google.colab.patches import cv2_imshow#

#modelo escolhido (ele já é treinado)
model = YOLO('yolov8n.pt')

#imagem original
img  = "000002.jpg"
result_predict = model.predict(source = img, imgsz=(960))

#apresetando resultado
plot = result_predict[0].plot()
plot_rgb = cv2.cvtColor(plot, cv2.COLOR_BGR2RGB)
cv2_imshow(plot_rgb)
cv2.waitKey(0)
cv2.destroyAllWindows()

#

!pip install pytube
!pip install --upgrade pytube

import cv2
from ultralytics import YOLO
from google.colab.patches import cv2_imshow

model = YOLO('yolov8n.pt')
cap = cv2.VideoCapture("videoplayback.mp4")

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    results = model.predict(source=frame, imgsz=960, conf=0.3, verbose=False)
    plot = results[0].plot()
    cv2_imshow(plot)  # <- Aqui está a substituição

    if cv2.waitKey(1) == 27:  # ESC
        break

cap.release()
cv2.destroyAllWindows()

import cv2  # Biblioteca OpenCV para processar imagens e vídeos
from ultralytics import YOLO  # Importa a classe do modelo YOLO da biblioteca Ultralytics
from google.colab.patches import cv2_imshow  # Função para exibir imagens no Google Colab
import time  # Biblioteca para pausar a execução (usada para dar tempo de ver os frames)

# Carrega o modelo YOLOv8 versão "nano" (leve e rápido), já pré-treinado
model = YOLO('yolov8n.pt')

# Abre o arquivo de vídeo para leitura
cap = cv2.VideoCapture("fast motion cars moving on highway.mp4")

frame_count = 0  # Contador de frames (quadros do vídeo)

# Enquanto o vídeo estiver aberto (não acabou nem deu erro)
while cap.isOpened():
    ret, frame = cap.read()  # Lê o próximo frame do vídeo

    if not ret:
        break  # Sai do loop se não conseguiu ler (fim do vídeo, por exemplo)

    frame_count += 1  # Incrementa o contador de frames

    # Só processa e mostra a cada 5 frames
    if frame_count % 10 == 0:
        # Aplica a detecção de objetos no frame atual
        results = model.predict(source=frame, imgsz=736, conf=0.63, verbose=False)

        # Gera uma cópia da imagem com as caixas e rótulos desenhados
        plot = results[0].plot()

        # Exibe a imagem processada no notebook Colab
        cv2_imshow(plot)

        # Dá uma pausa de 0.2 segundos para que a imagem possa ser vista
        time.sleep(0.5)

# Libera o vídeo e fecha as janelas (mesmo que não sejam usadas no Colab)
cap.release()
cv2.destroyAllWindows()